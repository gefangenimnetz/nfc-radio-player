==========
tagtool.py
==========

The **tagtool.py** example program can be used to read or write NFC
Forum Tags. For some tags, currently Type 3 Tags only, **tagtool** can
also be used to format for NDEF use. ::

  $ tagtool.py [-h|--help] [options] command

.. contents::
   :local:

Options
=======

.. include:: cli-general-options.txt
.. include:: cli-reader-options.txt
.. include:: cli-debug-options.txt
.. include:: cli-device-options.txt

Commands
========

Available commands are listed below. The default if no command is
specified is to invoke **tagtool.py show**.

show
----

The **show** command prints information about a tag, including NDEF
data if present.::

  $ tagtool.py [options] show [-h] [-v]

.. program:: tagtool.py show

.. option:: -v

   Print verbose information about the tag found. The amount of
   additional information depends on the tag type. 

dump
----

The **dump** command dumps tag data to the console or into a
file. Data written to the console is a hexadecimal string. Data
written to a file is raw bytes. ::

  $ tagtool.py [options] dump [-h] [-o FILE]

.. program:: tagtool.py dump

.. option:: -o FILE

   Write data to FILE. Data format is plain bytes.

load
----

The **load** command writes data to a tag. Data may be plain bytes or
a hex string, as generated by the **dump** command or with the
**ndeftool**. ::

  $ tagtool.py [options] load [-h] FILE

.. program:: tagtool.py load

.. option:: FILE

   Load NDEF data to write from **FILE** which must exist and be
   readable. The file may contain NDEF data in either raw bytes or a
   hexadecimal string which gets converted to bytes. If **FILE** is
   specified as a single dash ``-`` data is read from **stdin**.

format
------

The **format** command writes NDEF capability information for an empty
NDEF memory area on NFC Forum compliant tags. The tag type must be
specified. The only currently supported tag type it **tt3**. ::

  $ tagtool.py [options] format [-h] {tt1,tt3} ...

format tt1
^^^^^^^^^^

The **format tt1** command formats the NDEF partition on a Type 1
Tag. ::

  $ tagtool.py [options] format tt1 [-h]

.. program:: tagtool.py format tt1

format tt3
^^^^^^^^^^

The **format tt3** command formats the NDEF partition on a Type 3
Tag. With no additional options it does format for the maximum
capacity. With further options it is possible to create any kind of
weird tag formats for testing reader implementations. ::

  $ tagtool.py [options] format tt3 [-h] [--ver STR] [--nbr INT] [--nbw INT]
                                    [--max INT] [--rfu INT] [--wf INT]
                                    [--rw INT] [--len INT] [--crc INT]

.. program:: tagtool.py format tt3

.. option:: --ver STR

   Type 3 Tag NDEF mapping version number, specified as a version
   string with minor and major number separated by a single dot
   character. Both major and minor version numbers must be in range
   ``0<=N<=15``. The default value is ``"1.1"``.

.. option:: --nbr INT

   Type 3 Tag attribute block *Nbr* field value, the number of blocks
   that can be read at once. Must be in range ``0<=INT<=255``. If this
   option is not specified the automatically detected value is
   written.

.. option:: --nbw INT

   Type 3 Tag attribute block *Nbw* field value, the number of blocks
   that can be written at once. Must be in range ``0<=INT<=255``. If
   this option is not specified the automatically detected value is
   written.

.. option:: --max INT

   Type 3 Tag attribute block *Nmaxb* field value, which is the
   maximum number of blocks available for NDEF data. Must be in range
   ``0<=INT<=255``. If this option is not specified the automatically
   detected value is written.

.. option:: --rfu INT

   Type 3 Tag attribute block *reserved* field value. Must be in range
   ``0<=INT<=255``. The default value is 0.

.. option:: --wf INT

   Type 3 Tag attribute block *WriteF* field value. Must be in range
   ``0<=INT<=255``. The default value is 0.

.. option:: --rw INT

   Type 3 Tag attribute block *RW Flag* field value. Must be in range
   ``0<=INT<=255``. The default value is 1.

.. option:: --len INT

   Type 3 Tag attribute block *Ln* field value that specifies the
   actual size of the NDEF data stored. Must be in range
   ``0<=INT<=16777215``. The default value is 0.

.. option:: --crs INT

   Type 3 Tag attribute block *Checksum* field value. Must be in range
   ``0<=INT<=65535``. If this option is not specified the automatically
   computed checksum is written.

emulate
-------

The **emulate** command emulates an NDEF tag if the hardware and
driver support that functionality. The tag type must be specified
following the optional parameters. The only currently supported tag
type it **tt3**. ::

  $ tagtool.py emulate [-h] [-l] [-k] [-s SIZE] [-p FILE] [FILE] {tt3} ...

.. program:: tagtool.py emulate

.. option:: FILE

   Initialize the tag with NDEF data read from **FILE**. If not
   specified the tag will be just empty.

.. option:: -l, --loop

   Automatically restart after the tag has been released by the Initiator.

.. option:: -k, --keep

   If the ``--loop`` option is set, keep the same memory content
   after tag relase for the next tag activation. Without the ``-k``
   option the tag memory is initialized from the command options for
   every activation.

.. option:: -s SIZE

   The maximum size for NDEF data. Depending on the tag type this may
   be rounded to the nearest multiple of the tag storage granularity.

.. option:: -p FILE

   Preserve memory content in **FILE** after the tag is relased by the
   Initiator. The file is created if it does not exist and otherwise
   overwritten.

emulate tt3
^^^^^^^^^^^

The **emulate tt3** command emulates an NFC Forum Type 3 Tag. ::

  $ tagtool.py [options] emulate [options] tt3 [-h] [--idm HEX] [--pmm HEX]
                                               [--sys HEX] [--bitrate {212,424}]

.. program:: tagtool.py format

.. option:: --idm HEX

   The Manufacture Identifier to use in the polling response. Specified
   as a hexadecimal string. Defaults to ``03FEFFE011223344``.

.. option:: --pmm HEX

   The Manufacture Parameter to use in the polling response. Specified
   as a hexadecimal string. Defaults to ``01E0000000FFFF00``.

.. option:: --sys HEX, --sc HEX

   The system code use in the polling response if requested. Specified
   as a hexadecimal string. Defaults to ``12FC``.

.. option:: --bitrate {212,424}

   The bitrate to listen for and respond with. Must be either 212
   or 424. Defaults to 212 kbps.

Examples
========

Copy NDEF from one tag to another::

  $ tagtool.py dump -o /tmp/tag.ndef && tagtool load /tmp/tag.ndef

Copy NDEF from one tag to many others::

  $ tagtool.py dump -o /tmp/tag.ndef && tagtool --loop load /tmp/tag.ndef

